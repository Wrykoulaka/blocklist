name: Generate Artifacts

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout main branch
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      # 2. Setup Python 3.x
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3. Get Python version for cache key
      - name: Get Python version
        id: python-version
        run: echo "version=$(python3 -c 'import sys; print(f\"{sys.version_info.major}.{sys.version_info.minor}\")')" >> $GITHUB_OUTPUT

      # 4. Cache the entire venv
      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: /tmp/venv
          key: ${{ runner.os }}-venv-py${{ steps.python-version.outputs.version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-py${{ steps.python-version.outputs.version }}-

      # 5. Set up venv if cache missed
      - name: Set up venv
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python3 -m venv /tmp/venv
          /tmp/venv/bin/pip install --upgrade pip
          /tmp/venv/bin/pip install -r requirements.txt

      # 6. Add venv to PATH globally for all steps
      - name: Add venv to PATH
        run: echo "/tmp/venv/bin" >> $GITHUB_PATH

      # 7. Backup scripts before branch switch
      - name: Backup scripts
        run: |
          mkdir -p /tmp/scripts
          cp -r adaway /tmp/scripts/
          cp -r skynet /tmp/scripts/
          cp requirements.txt /tmp/scripts/

      # 8. Switch to autogen-artifacts branch
      - name: Switch to autogen-artifacts branch
        run: |
          git fetch origin
          if git ls-remote --exit-code --heads origin autogen-artifacts; then
            git checkout autogen-artifacts
          else
            git checkout --orphan autogen-artifacts
          fi

      # 9. Backup CSV files
      - name: Backup CSV
        run: |
          mkdir -p /tmp/backup
          cp skynet/ip_counts_history.csv /tmp/backup/ 2>/dev/null || true
          cp adaway/counts_history.csv /tmp/backup/ 2>/dev/null || true

      # 10. Clean branch except .git
      - name: Clean branch
        run: |
          find . -mindepth 1 ! -path './.git*' -delete

      # 11. Restore scripts
      - name: Restore scripts
        run: cp -r /tmp/scripts/* ./

      # 12. Restore CSV
      - name: Restore CSV
        run: |
          mkdir -p adaway skynet
          cp /tmp/backup/ip_counts_history.csv skynet/ 2>/dev/null || true
          cp /tmp/backup/counts_history.csv adaway/ 2>/dev/null || true

      # 13. Run adaway scripts
      - name: Run main.py script
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        working-directory: adaway
        run: python3 main.py

      - name: Run plot.py script
        working-directory: adaway
        run: python3 plot.py

      # 14. Run skynet scripts
      - name: Run bash update.sh
        working-directory: skynet
        run: bash update.sh

      - name: Run plot.py script
        working-directory: skynet
        run: python3 plot.py

      # 15. Commit and push changes
      - name: Commit and push autogen-artifacts files
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add -f adaway/unified_hosts.txt
          git add -f adaway/counts_history.csv
          git add -f adaway/counts_graph.png
          git add -f skynet/ip_counts_history.csv
          git add -f skynet/ip_counts_graph.png
          git commit -m "Update hosts and filter files" || echo "No changes to commit"
          git push origin autogen-artifacts --force
